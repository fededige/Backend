# ===============================
# = DATA SOURCE - PostgreSQL-LOCALE-DOCKER
# ===============================
# Set here configurations for the database connection
spring.datasource.url=jdbc:postgresql://${POSTGRES_DB_HOST:localhost}:5435/project-review
spring.datasource.username=review
spring.datasource.password=review
spring.datasource.driver-class-name=org.postgresql.Driver


# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=update
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.globally_quoted_identifiers=true

spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

## ===============================
## RabbitMQ configuration
#
#
#RabbitMQ settings
spring.rabbitmq.host=${RABBITMQ_HOST:localhost}
spring.rabbitmq.virtualhost=/
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
rabbitmq.exchange.name=userQueue_exchange
rabbitmq.queue.reviewUser.name=reviewUser
rabbitmq.routing.reviewUser.key=reviewUser_routing_key
rabbitmq.queue.reviewReservation.name=reviewReservation
rabbitmq.routing.reviewReservation.key=reviewReservation_routing_key
#
#
## ===============================

#reservation microservice configuration
api_gateway=${API_GATEWAY_HOST:localhost}:8080
#user_url=${USER_HOST:localhost}:8080
# ===============================
